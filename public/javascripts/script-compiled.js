'use strict';

$(function () {
    var createCodeMirror = function createCodeMirror(value) {
        var EDITOR_DEBOUNNCE = 3000;
        var codeMirror = CodeMirror($('#editor-pane').get(0), {
            lineNumbers: true,
            styleActiveLine: true,
            value: value,
            lineWrapping: true
        });
        codeMirror.on('change', _.debounce(function (codeMirror, changeObj) {
            var payload = {
                text: codeMirror.getValue()
            };
            if (changeObj.origin !== 'setValue') {
                $.post('/editor', payload).fail(function (err) {
                    throw new Error(err);
                    $errorPanel.show();
                });
            }
        }, EDITOR_DEBOUNNCE, { trailing: true }));
        return codeMirror;
    };

    var splitPane = function splitPane() {
        Split(['#editor-pane', '#upload-pane'], {
            sizes: [75, 25],
            direction: 'vertical',
            gutterSize: 8
        });
    };

    var connectWs = function connectWs(codeMirror, port) {
        var hostName = window.document.location.host.replace(/:.*/, '');
        var ws = new WebSocket('ws://' + hostName + (':' + port));
        ws.onmessage = function (event) {
            return codeMirror.setValue(event.data);
        };
    };

    var init = function init() {
        splitPane();
        $.get('/editor').done(function (res) {
            var codeMirror = createCodeMirror(res.text);
            connectWs(codeMirror, res.wsPort);
        }).fail(function (err) {
            throw new Error(err);
            $errorPanel.show();
        });
    };

    init();
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEVBQUUsWUFBTTtBQUNKLFFBQU0sbUJBQW1CLFNBQW5CLGdCQUFtQixDQUFDLEtBQUQsRUFBVztBQUNoQyxZQUFNLG1CQUFtQixJQUF6QjtBQUNBLFlBQUksYUFBYSxXQUFXLEVBQUUsY0FBRixFQUFrQixHQUFsQixDQUFzQixDQUF0QixDQUFYLEVBQXFDO0FBQ2xELHlCQUFhLElBRHFDO0FBRWxELDZCQUFpQixJQUZpQztBQUdsRCxtQkFBTyxLQUgyQztBQUlsRCwwQkFBZTtBQUptQyxTQUFyQyxDQUFqQjtBQU1BLG1CQUFXLEVBQVgsQ0FBYyxRQUFkLEVBQXdCLEVBQUUsUUFBRixDQUFXLFVBQUMsVUFBRCxFQUFhLFNBQWIsRUFBMkI7QUFDMUQsZ0JBQU0sVUFBVTtBQUNaLHNCQUFNLFdBQVcsUUFBWDtBQURNLGFBQWhCO0FBR0EsZ0JBQUksVUFBVSxNQUFWLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ2pDLGtCQUFFLElBQUYsQ0FBTyxTQUFQLEVBQWtCLE9BQWxCLEVBQ0ssSUFETCxDQUNVLFVBQUMsR0FBRCxFQUFTO0FBQ1gsMEJBQU0sSUFBSSxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0EsZ0NBQVksSUFBWjtBQUNILGlCQUpMO0FBS0g7QUFDSixTQVh1QixFQVdyQixnQkFYcUIsRUFXSCxFQUFFLFVBQVUsSUFBWixFQVhHLENBQXhCO0FBWUEsZUFBTyxVQUFQO0FBQ0gsS0FyQkQ7O0FBdUJBLFFBQU0sWUFBWSxTQUFaLFNBQVksR0FBTTtBQUNwQixjQUFNLENBQUMsY0FBRCxFQUFpQixjQUFqQixDQUFOLEVBQXdDO0FBQ3BDLG1CQUFPLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FENkI7QUFFcEMsdUJBQVcsVUFGeUI7QUFHcEMsd0JBQVk7QUFId0IsU0FBeEM7QUFLSCxLQU5EOztBQVFBLFFBQU0sWUFBWSxTQUFaLFNBQVksQ0FBQyxVQUFELEVBQWEsSUFBYixFQUFzQjtBQUNwQyxZQUFJLFdBQVcsT0FBTyxRQUFQLENBQWdCLFFBQWhCLENBQXlCLElBQXpCLENBQThCLE9BQTlCLENBQXNDLEtBQXRDLEVBQTZDLEVBQTdDLENBQWY7QUFDQSxZQUFJLEtBQUssSUFBSSxTQUFKLENBQWMsVUFBVSxRQUFWLFVBQXlCLElBQXpCLENBQWQsQ0FBVDtBQUNBLFdBQUcsU0FBSCxHQUFlLFVBQUMsS0FBRDtBQUFBLG1CQUFXLFdBQVcsUUFBWCxDQUFvQixNQUFNLElBQTFCLENBQVg7QUFBQSxTQUFmO0FBQ0gsS0FKRDs7QUFNQSxRQUFNLE9BQU8sU0FBUCxJQUFPLEdBQU07QUFDZjtBQUNBLFVBQUUsR0FBRixDQUFNLFNBQU4sRUFDSyxJQURMLENBQ1UsVUFBQyxHQUFELEVBQVM7QUFDWCxnQkFBSSxhQUFhLGlCQUFpQixJQUFJLElBQXJCLENBQWpCO0FBQ0Esc0JBQVUsVUFBVixFQUFzQixJQUFJLE1BQTFCO0FBQ0gsU0FKTCxFQUtLLElBTEwsQ0FLVSxVQUFDLEdBQUQsRUFBUztBQUNYLGtCQUFNLElBQUksS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNBLHdCQUFZLElBQVo7QUFDSCxTQVJMO0FBU0gsS0FYRDs7QUFhQTtBQUNILENBcEREIiwiZmlsZSI6InNjcmlwdC1jb21waWxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQoKCkgPT4ge1xuICAgIGNvbnN0IGNyZWF0ZUNvZGVNaXJyb3IgPSAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgRURJVE9SX0RFQk9VTk5DRSA9IDMwMDBcbiAgICAgICAgbGV0IGNvZGVNaXJyb3IgPSBDb2RlTWlycm9yKCQoJyNlZGl0b3ItcGFuZScpLmdldCgwKSwge1xuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXG4gICAgICAgICAgICBzdHlsZUFjdGl2ZUxpbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBsaW5lV3JhcHBpbmcgOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICAgIGNvZGVNaXJyb3Iub24oJ2NoYW5nZScsIF8uZGVib3VuY2UoKGNvZGVNaXJyb3IsIGNoYW5nZU9iaikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBjb2RlTWlycm9yLmdldFZhbHVlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFuZ2VPYmoub3JpZ2luICE9PSAnc2V0VmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgJC5wb3N0KCcvZWRpdG9yJywgcGF5bG9hZClcbiAgICAgICAgICAgICAgICAgICAgLmZhaWwoKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgICRlcnJvclBhbmVsLnNob3coKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBFRElUT1JfREVCT1VOTkNFLCB7IHRyYWlsaW5nOiB0cnVlIH0pKVxuICAgICAgICByZXR1cm4gY29kZU1pcnJvclxuICAgIH1cblxuICAgIGNvbnN0IHNwbGl0UGFuZSA9ICgpID0+IHtcbiAgICAgICAgU3BsaXQoWycjZWRpdG9yLXBhbmUnLCAnI3VwbG9hZC1wYW5lJ10sIHtcbiAgICAgICAgICAgIHNpemVzOiBbNzUsIDI1XSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgICAgICAgIGd1dHRlclNpemU6IDhcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBjb25uZWN0V3MgPSAoY29kZU1pcnJvciwgcG9ydCkgPT4ge1xuICAgICAgICB2YXIgaG9zdE5hbWUgPSB3aW5kb3cuZG9jdW1lbnQubG9jYXRpb24uaG9zdC5yZXBsYWNlKC86LiovLCAnJylcbiAgICAgICAgdmFyIHdzID0gbmV3IFdlYlNvY2tldCgnd3M6Ly8nICsgaG9zdE5hbWUgKyBgOiR7cG9ydH1gKVxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IGNvZGVNaXJyb3Iuc2V0VmFsdWUoZXZlbnQuZGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICAgICBzcGxpdFBhbmUoKVxuICAgICAgICAkLmdldCgnL2VkaXRvcicpXG4gICAgICAgICAgICAuZG9uZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVNaXJyb3IgPSBjcmVhdGVDb2RlTWlycm9yKHJlcy50ZXh0KVxuICAgICAgICAgICAgICAgIGNvbm5lY3RXcyhjb2RlTWlycm9yLCByZXMud3NQb3J0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxuICAgICAgICAgICAgICAgICRlcnJvclBhbmVsLnNob3coKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBpbml0KClcbn0pIl19