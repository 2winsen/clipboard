'use strict';

$(function () {
    var createCodeMirror = function createCodeMirror(value) {
        var EDITOR_DEBOUNNCE = 3000;
        var codeMirror = CodeMirror($('#editor-pane').get(0), {
            lineNumbers: true,
            styleActiveLine: true,
            value: value,
            lineWrapping: true
        });
        codeMirror.on('change', _.debounce(function (codeMirror, changeObj) {
            var payload = {
                text: codeMirror.getValue()
            };
            if (changeObj.origin !== 'setValue') {
                $.post('/editor', payload).fail(function (err) {
                    throw new Error(err);
                    $errorPanel.show();
                });
            }
        }, EDITOR_DEBOUNNCE, { trailing: true }));
        return codeMirror;
    };

    var splitPane = function splitPane() {
        Split(['#editor-pane', '#upload-pane'], {
            sizes: [75, 25],
            direction: 'vertical',
            gutterSize: 8
        });
    };

    var connectWs = function connectWs(codeMirror, port) {
        var ws = new WebSocket('ws://' + window.document.location.host);
        ws.onmessage = function (event) {
            return codeMirror.setValue(event.data);
        };
    };

    var init = function init() {
        splitPane();
        $.get('/editor').done(function (res) {
            var codeMirror = createCodeMirror(res.text);
            connectWs(codeMirror, res.wsPort);
        }).fail(function (err) {
            throw new Error(err);
            $errorPanel.show();
        });
    };

    init();
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEVBQUUsWUFBTTtBQUNKLFFBQU0sbUJBQW1CLFNBQW5CLGdCQUFtQixDQUFDLEtBQUQsRUFBVztBQUNoQyxZQUFNLG1CQUFtQixJQUF6QjtBQUNBLFlBQUksYUFBYSxXQUFXLEVBQUUsY0FBRixFQUFrQixHQUFsQixDQUFzQixDQUF0QixDQUFYLEVBQXFDO0FBQ2xELHlCQUFhLElBRHFDO0FBRWxELDZCQUFpQixJQUZpQztBQUdsRCxtQkFBTyxLQUgyQztBQUlsRCwwQkFBZTtBQUptQyxTQUFyQyxDQUFqQjtBQU1BLG1CQUFXLEVBQVgsQ0FBYyxRQUFkLEVBQXdCLEVBQUUsUUFBRixDQUFXLFVBQUMsVUFBRCxFQUFhLFNBQWIsRUFBMkI7QUFDMUQsZ0JBQU0sVUFBVTtBQUNaLHNCQUFNLFdBQVcsUUFBWDtBQURNLGFBQWhCO0FBR0EsZ0JBQUksVUFBVSxNQUFWLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ2pDLGtCQUFFLElBQUYsQ0FBTyxTQUFQLEVBQWtCLE9BQWxCLEVBQ0ssSUFETCxDQUNVLFVBQUMsR0FBRCxFQUFTO0FBQ1gsMEJBQU0sSUFBSSxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0EsZ0NBQVksSUFBWjtBQUNILGlCQUpMO0FBS0g7QUFDSixTQVh1QixFQVdyQixnQkFYcUIsRUFXSCxFQUFFLFVBQVUsSUFBWixFQVhHLENBQXhCO0FBWUEsZUFBTyxVQUFQO0FBQ0gsS0FyQkQ7O0FBdUJBLFFBQU0sWUFBWSxTQUFaLFNBQVksR0FBTTtBQUNwQixjQUFNLENBQUMsY0FBRCxFQUFpQixjQUFqQixDQUFOLEVBQXdDO0FBQ3BDLG1CQUFPLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FENkI7QUFFcEMsdUJBQVcsVUFGeUI7QUFHcEMsd0JBQVk7QUFId0IsU0FBeEM7QUFLSCxLQU5EOztBQVFBLFFBQU0sWUFBWSxTQUFaLFNBQVksQ0FBQyxVQUFELEVBQWEsSUFBYixFQUFzQjtBQUNwQyxZQUFJLEtBQUssSUFBSSxTQUFKLFdBQXNCLE9BQU8sUUFBUCxDQUFnQixRQUFoQixDQUF5QixJQUEvQyxDQUFUO0FBQ0EsV0FBRyxTQUFILEdBQWUsVUFBQyxLQUFEO0FBQUEsbUJBQVcsV0FBVyxRQUFYLENBQW9CLE1BQU0sSUFBMUIsQ0FBWDtBQUFBLFNBQWY7QUFDSCxLQUhEOztBQUtBLFFBQU0sT0FBTyxTQUFQLElBQU8sR0FBTTtBQUNmO0FBQ0EsVUFBRSxHQUFGLENBQU0sU0FBTixFQUNLLElBREwsQ0FDVSxVQUFDLEdBQUQsRUFBUztBQUNYLGdCQUFJLGFBQWEsaUJBQWlCLElBQUksSUFBckIsQ0FBakI7QUFDQSxzQkFBVSxVQUFWLEVBQXNCLElBQUksTUFBMUI7QUFDSCxTQUpMLEVBS0ssSUFMTCxDQUtVLFVBQUMsR0FBRCxFQUFTO0FBQ1gsa0JBQU0sSUFBSSxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Esd0JBQVksSUFBWjtBQUNILFNBUkw7QUFTSCxLQVhEOztBQWFBO0FBQ0gsQ0FuREQiLCJmaWxlIjoic2NyaXB0LWNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgoKSA9PiB7XG4gICAgY29uc3QgY3JlYXRlQ29kZU1pcnJvciA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBFRElUT1JfREVCT1VOTkNFID0gMzAwMFxuICAgICAgICBsZXQgY29kZU1pcnJvciA9IENvZGVNaXJyb3IoJCgnI2VkaXRvci1wYW5lJykuZ2V0KDApLCB7XG4gICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcbiAgICAgICAgICAgIHN0eWxlQWN0aXZlTGluZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGxpbmVXcmFwcGluZyA6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgY29kZU1pcnJvci5vbignY2hhbmdlJywgXy5kZWJvdW5jZSgoY29kZU1pcnJvciwgY2hhbmdlT2JqKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGNvZGVNaXJyb3IuZ2V0VmFsdWUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYW5nZU9iai5vcmlnaW4gIT09ICdzZXRWYWx1ZScpIHtcbiAgICAgICAgICAgICAgICAkLnBvc3QoJy9lZGl0b3InLCBwYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICAuZmFpbCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgJGVycm9yUGFuZWwuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIEVESVRPUl9ERUJPVU5OQ0UsIHsgdHJhaWxpbmc6IHRydWUgfSkpXG4gICAgICAgIHJldHVybiBjb2RlTWlycm9yXG4gICAgfVxuXG4gICAgY29uc3Qgc3BsaXRQYW5lID0gKCkgPT4ge1xuICAgICAgICBTcGxpdChbJyNlZGl0b3ItcGFuZScsICcjdXBsb2FkLXBhbmUnXSwge1xuICAgICAgICAgICAgc2l6ZXM6IFs3NSwgMjVdLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICAgICAgICAgICAgZ3V0dGVyU2l6ZTogOFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGNvbm5lY3RXcyA9IChjb2RlTWlycm9yLCBwb3J0KSA9PiB7XG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vJHt3aW5kb3cuZG9jdW1lbnQubG9jYXRpb24uaG9zdH1gKVxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IGNvZGVNaXJyb3Iuc2V0VmFsdWUoZXZlbnQuZGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgICAgICBzcGxpdFBhbmUoKVxuICAgICAgICAkLmdldCgnL2VkaXRvcicpXG4gICAgICAgICAgICAuZG9uZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVNaXJyb3IgPSBjcmVhdGVDb2RlTWlycm9yKHJlcy50ZXh0KVxuICAgICAgICAgICAgICAgIGNvbm5lY3RXcyhjb2RlTWlycm9yLCByZXMud3NQb3J0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKVxuICAgICAgICAgICAgICAgICRlcnJvclBhbmVsLnNob3coKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBpbml0KClcbn0pIl19