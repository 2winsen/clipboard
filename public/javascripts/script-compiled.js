'use strict';

$(function () {
    var $errorPanel = $('#error-panel');

    var xhrFailHandler = function xhrFailHandler(err) {
        $errorPanel.show();
        throw new Error('XHR request faled with status text - ' + err.statusText);
    };

    var createCodeMirror = function createCodeMirror(value) {
        var EDITOR_DEBOUNNCE = 1500;
        var codeMirror = CodeMirror($('#editor-pane').get(0), {
            lineNumbers: true,
            styleActiveLine: true,
            value: value,
            lineWrapping: true
        });
        codeMirror.on('change', _.debounce(function (codeMirror, changeObj) {
            var payload = {
                text: codeMirror.getValue()
            };
            if (changeObj.origin !== 'setValue') {
                $.post('/editor', payload).fail(xhrFailHandler);
            }
        }, EDITOR_DEBOUNNCE, { trailing: true }));
        return codeMirror;
    };

    var splitPane = function splitPane() {
        Split(['#editor-pane', '#upload-pane'], {
            sizes: [75, 25],
            direction: 'vertical',
            gutterSize: 8
        });
    };

    var connectWs = function connectWs(codeMirror, port) {
        var ws = new WebSocket('ws://' + window.document.location.host);
        ws.onmessage = function (event) {
            return codeMirror.setValue(event.data);
        };
        ws.onclose = function (event) {
            $errorPanel.show();
            throw new Error('WS closed - CODE: ' + event.code + ', REASON: ' + event.reason);
        };
    };

    var init = function init() {
        splitPane();
        $.get('/editor').done(function (res) {
            var codeMirror = createCodeMirror(res.text);
            connectWs(codeMirror, res.wsPort);
        }).fail(xhrFailHandler);
    };

    init();
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEVBQUUsWUFBTTtBQUNKLFFBQU0sY0FBYyxFQUFFLGNBQUYsQ0FBcEI7O0FBRUEsUUFBTSxpQkFBaUIsU0FBakIsY0FBaUIsQ0FBQyxHQUFELEVBQVM7QUFDNUIsb0JBQVksSUFBWjtBQUNBLGNBQU0sSUFBSSxLQUFKLDJDQUFrRCxJQUFJLFVBQXRELENBQU47QUFDSCxLQUhEOztBQUtBLFFBQU0sbUJBQW1CLFNBQW5CLGdCQUFtQixDQUFDLEtBQUQsRUFBVztBQUNoQyxZQUFNLG1CQUFtQixJQUF6QjtBQUNBLFlBQUksYUFBYSxXQUFXLEVBQUUsY0FBRixFQUFrQixHQUFsQixDQUFzQixDQUF0QixDQUFYLEVBQXFDO0FBQ2xELHlCQUFhLElBRHFDO0FBRWxELDZCQUFpQixJQUZpQztBQUdsRCxtQkFBTyxLQUgyQztBQUlsRCwwQkFBYztBQUpvQyxTQUFyQyxDQUFqQjtBQU1BLG1CQUFXLEVBQVgsQ0FBYyxRQUFkLEVBQXdCLEVBQUUsUUFBRixDQUFXLFVBQUMsVUFBRCxFQUFhLFNBQWIsRUFBMkI7QUFDMUQsZ0JBQU0sVUFBVTtBQUNaLHNCQUFNLFdBQVcsUUFBWDtBQURNLGFBQWhCO0FBR0EsZ0JBQUksVUFBVSxNQUFWLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ2pDLGtCQUFFLElBQUYsQ0FBTyxTQUFQLEVBQWtCLE9BQWxCLEVBQ0ssSUFETCxDQUNVLGNBRFY7QUFFSDtBQUNKLFNBUnVCLEVBUXJCLGdCQVJxQixFQVFILEVBQUUsVUFBVSxJQUFaLEVBUkcsQ0FBeEI7QUFTQSxlQUFPLFVBQVA7QUFDSCxLQWxCRDs7QUFvQkEsUUFBTSxZQUFZLFNBQVosU0FBWSxHQUFNO0FBQ3BCLGNBQU0sQ0FBQyxjQUFELEVBQWlCLGNBQWpCLENBQU4sRUFBd0M7QUFDcEMsbUJBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxDQUQ2QjtBQUVwQyx1QkFBVyxVQUZ5QjtBQUdwQyx3QkFBWTtBQUh3QixTQUF4QztBQUtILEtBTkQ7O0FBUUEsUUFBTSxZQUFZLFNBQVosU0FBWSxDQUFDLFVBQUQsRUFBYSxJQUFiLEVBQXNCO0FBQ3BDLFlBQUksS0FBSyxJQUFJLFNBQUosV0FBc0IsT0FBTyxRQUFQLENBQWdCLFFBQWhCLENBQXlCLElBQS9DLENBQVQ7QUFDQSxXQUFHLFNBQUgsR0FBZSxVQUFDLEtBQUQ7QUFBQSxtQkFBVyxXQUFXLFFBQVgsQ0FBb0IsTUFBTSxJQUExQixDQUFYO0FBQUEsU0FBZjtBQUNBLFdBQUcsT0FBSCxHQUFhLFVBQUMsS0FBRCxFQUFXO0FBQ3BCLHdCQUFZLElBQVo7QUFDQSxrQkFBTSxJQUFJLEtBQUosd0JBQStCLE1BQU0sSUFBckMsa0JBQXNELE1BQU0sTUFBNUQsQ0FBTjtBQUNILFNBSEQ7QUFJSCxLQVBEOztBQVNBLFFBQU0sT0FBTyxTQUFQLElBQU8sR0FBTTtBQUNmO0FBQ0EsVUFBRSxHQUFGLENBQU0sU0FBTixFQUNLLElBREwsQ0FDVSxVQUFDLEdBQUQsRUFBUztBQUNYLGdCQUFJLGFBQWEsaUJBQWlCLElBQUksSUFBckIsQ0FBakI7QUFDQSxzQkFBVSxVQUFWLEVBQXNCLElBQUksTUFBMUI7QUFDSCxTQUpMLEVBS0ssSUFMTCxDQUtVLGNBTFY7QUFNSCxLQVJEOztBQVVBO0FBQ0gsQ0F4REQiLCJmaWxlIjoic2NyaXB0LWNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgoKSA9PiB7XHJcbiAgICBjb25zdCAkZXJyb3JQYW5lbCA9ICQoJyNlcnJvci1wYW5lbCcpXHJcblxyXG4gICAgY29uc3QgeGhyRmFpbEhhbmRsZXIgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgJGVycm9yUGFuZWwuc2hvdygpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBYSFIgcmVxdWVzdCBmYWxlZCB3aXRoIHN0YXR1cyB0ZXh0IC0gJHtlcnIuc3RhdHVzVGV4dH1gKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNyZWF0ZUNvZGVNaXJyb3IgPSAodmFsdWUpID0+IHtcclxuICAgICAgICBjb25zdCBFRElUT1JfREVCT1VOTkNFID0gMTUwMFxyXG4gICAgICAgIGxldCBjb2RlTWlycm9yID0gQ29kZU1pcnJvcigkKCcjZWRpdG9yLXBhbmUnKS5nZXQoMCksIHtcclxuICAgICAgICAgICAgbGluZU51bWJlcnM6IHRydWUsXHJcbiAgICAgICAgICAgIHN0eWxlQWN0aXZlTGluZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICBsaW5lV3JhcHBpbmc6IHRydWVcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvZGVNaXJyb3Iub24oJ2NoYW5nZScsIF8uZGVib3VuY2UoKGNvZGVNaXJyb3IsIGNoYW5nZU9iaikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogY29kZU1pcnJvci5nZXRWYWx1ZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNoYW5nZU9iai5vcmlnaW4gIT09ICdzZXRWYWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICQucG9zdCgnL2VkaXRvcicsIHBheWxvYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZhaWwoeGhyRmFpbEhhbmRsZXIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBFRElUT1JfREVCT1VOTkNFLCB7IHRyYWlsaW5nOiB0cnVlIH0pKVxyXG4gICAgICAgIHJldHVybiBjb2RlTWlycm9yXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3BsaXRQYW5lID0gKCkgPT4ge1xyXG4gICAgICAgIFNwbGl0KFsnI2VkaXRvci1wYW5lJywgJyN1cGxvYWQtcGFuZSddLCB7XHJcbiAgICAgICAgICAgIHNpemVzOiBbNzUsIDI1XSxcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxyXG4gICAgICAgICAgICBndXR0ZXJTaXplOiA4XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb25uZWN0V3MgPSAoY29kZU1pcnJvciwgcG9ydCkgPT4ge1xyXG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vJHt3aW5kb3cuZG9jdW1lbnQubG9jYXRpb24uaG9zdH1gKVxyXG4gICAgICAgIHdzLm9ubWVzc2FnZSA9IChldmVudCkgPT4gY29kZU1pcnJvci5zZXRWYWx1ZShldmVudC5kYXRhKVxyXG4gICAgICAgIHdzLm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgJGVycm9yUGFuZWwuc2hvdygpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV1MgY2xvc2VkIC0gQ09ERTogJHtldmVudC5jb2RlfSwgUkVBU09OOiAke2V2ZW50LnJlYXNvbn1gKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbml0ID0gKCkgPT4ge1xyXG4gICAgICAgIHNwbGl0UGFuZSgpXHJcbiAgICAgICAgJC5nZXQoJy9lZGl0b3InKVxyXG4gICAgICAgICAgICAuZG9uZSgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29kZU1pcnJvciA9IGNyZWF0ZUNvZGVNaXJyb3IocmVzLnRleHQpXHJcbiAgICAgICAgICAgICAgICBjb25uZWN0V3MoY29kZU1pcnJvciwgcmVzLndzUG9ydClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZhaWwoeGhyRmFpbEhhbmRsZXIpXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpXHJcbn0pIl19